#include<stdio.h>

int main()
  {
	int x,s=0;

	do   {
	scanf("%d", &x);

  	if( x>25)
			{s++;}

	     } while( x!= 0);

	printf ("%d",s);

	return 0;
}

---------------------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
#define MAX 20

void NacitajMaticu(int r, int s, int A[MAX][MAX])
{
	int i, j;

	for (i = 0; i<r; i++)
	{
		for (j = 0; j<s; j++)
			scanf("%d", &A[i][j]);
	}
}

void VypisMaticu(int r, int s, int A[MAX][MAX])
{
	int i, j;

	for (i = 0; i<r; i++)
	{
		for (j = 0; j<s; j++)
			printf("%5d", A[i][j]);
		printf("\n");
	}
}

void NeparnePrvkyPodDiagonalou(int r, int s, int A[MAX][MAX],
	int neparne_prvky_pod_diag_f[MAX], int *p_pocet_neparn_prvkov_f, double *p_priemer_f, int *p_suma_f)
{
	int i, j, mod, k = 0, pocet_neparnych = 0, suma = 0, l = 0;
	double priemer = 0;

	for (i = 0; i<r; i++)
	{
		for (j = 0; j<s; j++)
		{
			mod = A[i][j] % 2;
			if ((mod != 0) && (i>j))
			{
				neparne_prvky_pod_diag_f[k] = A[i][j];
				pocet_neparnych++;
				suma += neparne_prvky_pod_diag_f[k];
				k++;
			}
		}
	}
	priemer = suma / (double)pocet_neparnych;


	*p_pocet_neparn_prvkov_f = pocet_neparnych;
	*p_priemer_f = priemer;                    ///premenna do ktorej si ulozim adresu inej premennej
	*p_suma_f = suma;            		 ///void mi vrati len prvky a ja chcem celu hodnotu cize preto som pouzil pointre
}
int main()
{
	int i, riadok, stlpec, pocet_neparn_prvkov, suma;
	int A[MAX][MAX], neparne_prvky_pod_diag[MAX];
	double priemer;

	int *p_pocet_neparn_prvkov, *p_suma;
	double *p_priemer;

	p_pocet_neparn_prvkov = &pocet_neparn_prvkov;
	p_priemer = &priemer;
	p_suma = &suma;

	scanf("%d %d", &riadok, &stlpec);

	NacitajMaticu(riadok, stlpec, A);
	printf("Matica A:\n");
	VypisMaticu(riadok, stlpec, A);

	NeparnePrvkyPodDiagonalou(riadok, stlpec, A, neparne_prvky_pod_diag, p_pocet_neparn_prvkov, p_priemer, p_suma);

	printf("\nNeparne prvky pod hlavnou diagonalou matice A su:  ");
	for (i = 0; i<pocet_neparn_prvkov; i++)
		printf("%3d", neparne_prvky_pod_diag[i]);

	printf("\nPocet neparnych prvkov pod hlavnou diagonalou matice A je: %d", pocet_neparn_prvkov);
	printf("\nPriemer neparnych prvkov pod hlavnou diagonalou matice A je: %.2f", priemer);
	printf("\nSuma neparnych prvkov pod hlavnou diagonalou matice A je: %d", suma);
	printf("\n");

	return 0;

}

--------------------------------------------------------------------------------------------------------------------------------

#include <stdio.h>

#define LINE_LENGHT 999

typedef struct CPLX
{
	double real;
	double imaginary;
}CPLX;

struct CPLX add(struct CPLX a, struct CPLX b)
{
	CPLX ret;
	ret.real = a.real + b.real;
	ret.imaginary = a.imaginary + b.imaginary;
	return ret;
}

struct CPLX sub(struct CPLX a, struct CPLX b)
{
	CPLX ret;
	ret.real = a.real - b.real;
	ret.imaginary = a.imaginary - b.imaginary;
	return ret;
}
struct CPLX mult(struct CPLX a, struct CPLX b)
{
	CPLX ret;
	ret.real = a.real * b.real - a.imaginary * b.imaginary;
	ret.imaginary = a.real * b.imaginary + a.imaginary * b.real;
	return ret;
}

int main(int argc, char* argv[])
{
	double real1; 
	double real2;
	double real3;
	double imaginary1, imaginary2, imaginary3;
	char operant, end, end2, end3;
	FILE *readF, *writeF;
	readF = fopen("vstup_2_3_komplex_cisla_operatory.txt", "r");
	writeF = fopen("vystup.txt", "w");

	if (readF == NULL)
	{
        printf ("File not found\n");
		printf("Press 'Enter' to exit\n");
		getchar();
        return 1;
    }


	while (fscanf(readF, "%lf %*c %*c %lf %c %lf %*c %*c %lf", &real1, &imaginary1, &operant, &real2, &imaginary2) != EOF)
	{
		CPLX first, second, third, final;
		first.real = real1;
		first.imaginary = imaginary1;
		second.real = real2;
		second.imaginary = imaginary2;

		switch (operant)
		{
			case '+':
			{
				final = add(first, second);
				break;
			}
			case '-':
			{
				final = sub(first, second);
				break;
			}
			case '*':
			{
				final = mult(first, second);
				break;
			}
			default:
			{
				break;
			}
		}

		end = getc(readF);
		if (end == '\n' || end == EOF)
		{
			fprintf(writeF,"(%lf + i %lf) %c (%lf + i %lf) = %lf + i %lf\n", first.real, first.imaginary, operant, second.real, second.imaginary, final.real, final.imaginary);	
		}
		else 
		{
			fscanf(readF, "%*c %*c %lf %*c %*c %lf", &real3, &imaginary3);
			third.real = real3;
			third.imaginary = imaginary3;

			switch (operant)
			{
				case '+':
				{
					final = add(final, third);
					break;
				}
				case '-':
				{
					final = sub(final, third);
					break;
				}
				case '*':
				{
					final = mult(final, third);
					break;
				}
				default:
				{
					break;
				}
			}

			fprintf(writeF,"(%lf + i %lf) %c (%lf + i %lf) %c (%lf + i %lf) = %lf + i %lf\n", first.real, first.imaginary, operant, second.real, second.imaginary, operant, third.real, third.imaginary, final.real, final.imaginary);	

		}
		printf("%lf + i %lf\n",final.real, final.imaginary);
		

	}

	fclose(readF);
	fclose(writeF);

	printf("Press 'Enter' to exit\n");
	getchar();
	return 0;
}


