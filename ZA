#include<stdio.h>

#define MAX 100

int main ()
{
	int c[MAX], s=0, i=0;

	do {
	scanf("%d", &c[i]);
	s += c[i];
	    } while (c[i++]!=0);

 printf("suma spolu:%d", s);
 return 0;
}


--------------------------------------------------------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
 
#define MAX 20

/*NACITA MATICU*/
void NacitajMaticu(int r, int s, int A[MAX][MAX])
{
	int i, j;
	for(i=0; i<r; i++)
			for(j=0; j<s; j++)
				scanf("%d", &A[i][j]);
}

/*VYPISE MATICU*/
void VypisMaticu(int r, int s, int A[MAX][MAX])
{
	int i, j;
	for(i=0; i<r; i++)
	{ 
		for(j=0; j<s; j++)
				printf("%5d", A[i][j]);
		printf("\n");
  }
}

/*PARNE PRVKY NAD DIAGONALOU*/
void par_prvky_nad_dia( int r, int s, int A[MAX][MAX], int parne_prvky_pod_diag_f[MAX], int *p_pocet_parn_prvkov_f, double *p_priemer_f, int *p_suma_f)
{
	int i, j, modulo, k = 0, PocetParnych = 0, suma = 0, l = 0;

	double priemer = 0;

	for(i = 0; i<r; i++)
	{
		for(j = 0; j<s; j++)
		{ modulo = A[i][j] % 2;
				if ((modulo == 0) && (i<j))

		               {parne_prvky_pod_diag_f[k] = A[i][j];

				PocetParnych++;
				suma += parne_prvky_pod_diag_f[k];

				k++; }
		}
	}

	priemer =suma / (double)PocetParnych;

	*p_pocet_parn_prvkov_f = PocetParnych;

	*p_priemer_f = priemer;

	*p_suma_f = suma;
}
int main()
{

	int i, riadok, stlpec, pocet_parn_prvkov, suma;
	int A[MAX][MAX], parne_prvky_pod_diag[MAX];

	double priemer;

	int *p_pocet_parn_prvkov,*p_suma;
	double *p_priemer;

	p_pocet_parn_prvkov =&pocet_parn_prvkov;
	p_priemer =&priemer;
	p_suma =&suma;

	scanf("%d %d", &riadok, &stlpec);

	NacitajMaticu(riadok, stlpec, A);
	printf("Matica A:\n");
	VypisMaticu(riadok, stlpec, A);

	par_prvky_nad_dia(riadok, stlpec, A, parne_prvky_pod_diag, p_pocet_parn_prvkov, p_priemer, p_suma);

	printf("\nParne prvky nad hlavnou diagonalou matice A su:  ");
	for (i = 0; i<pocet_parn_prvkov; i++)
		printf("%3d", parne_prvky_pod_diag[i]);

	printf("Pocet parnych prvkov nad hl. diagonalou matice A: %d\n", pocet_parn_prvkov);
	printf("Priemer parnych prvkov nad hl. diagonalou matice A: %.2f\n", priemer);
	printf("Suma parnych prvkov nad hl. diagonalou matice A: %d\n", suma);

	return 0;
}

-----------------------------------------------------------------------------------------------------------------

#include <stdio.h>

#define max 20
  
/*PLUS*/
double add (double x, double y)
{
    double koniec;         
    koniec=x+y;	
    return koniec; }

/*MINUS*/
double sub(double x, double y)
{
    double koniec;
    koniec= x-y;
    return koniec;
}

/*NASOBENIE*/
double mult(double x, double y)
{
   double koniec;
   koniec=x*y;
   return vysledok;}

/*DELENIE*/
double divin(double x, double y)
{
	double koniec;
		koniec=x/y;
	return koniec; }

/*TEST ZHODY*/
int testovanie_zhody(int  p_vysled_f, double pole_vysled_f[max])
{
	int j, k=0, pocet_zhod=0;
	for(j=0; j<=p_vysled_f; j++)
		{k++;
		for(k; k<=p_vysled_f; k++)
	{
		if(pole_vysled_f[j]==pole_vysled_f[k])
			pocet_zhod++;
		}}
	if(pocet_zhod==0)
		return 0;
	else
		return 1;
}
void max_min(int p_vysled_f, double pole_vysled_f[20], double *p_min_vysled_f, double *p_max_vysledok_f)
{
	int l;
	float max, min;
	max=min=pole_vysled_f[0];
	for(l=0; l < p_vysled_f; l++)
	{
		if(max < pole_vysled_f[l])
		max = pole_vysled_f[l];
		if(min > pole_vysled_f[l])	
			min = pole_vysled_f[l];
	}
	*p_min_vysled_f=min;
	*p_max_vysledok_f=max;
}

  
int main()
{
int i=0;
float a, b, c, medzivysledok, suma=0; double vysledok[max];
double priemer, min, max;
double *p_min_vysled, *p_max_vysledok;
char op1, op2;
 FILE *vstup, *vystup;;

 p_min_vysled= &min;
 p_max_vysledok= &max;

vstup = fopen ("Priklad.txt", "r");
vystup = fopen ("vystup.txt", "w");

while(fscanf(vstup,"%f %c %f %c %f", &a, &op1, &b, &op2, &c) != EOF)
{

switch (op1)
{
case '+' : 
    		medzivysledok = add(a, b);
  		break;
case '-' : 
    		medzivysledok = sub(a, b);
  		break;
case '*' : 
    		medzivysledok = mult(a, b);
  		break;
case '/':
	{medzivysledok = divin(a, b);
	if(b==0)
		{fprintf(vystup, "Prvy delitel je nulovy\n");
	continue;}}
	break;
default:
	return 1;
	break; 

};

switch (op2)
{
case '+' : 
    		vysledok[i] = add(medzivysledok, c);
  		break;
case '-' : 
    		vysledok[i] = sub(medzivysledok, c);
  		break;
case '*' : 
    		vysledok[i] = mult(medzivysledok, c);
  		break;
case '/':
	{vysledok[i] = divin(medzivysledok, c);
	if(c==0)
		{fprintf(vystup, "Druhy delitel je nulovy\n");
	continue;}}
	break;
default:
	return 1;
	break; 

};

fprintf(vystup,"%.6f  %c %.6f %c %.6f= %.10f\n", a, op1, b, op2, c, vysledok[i]);
suma+=vysledok[i];
i++;
}
priemer=suma/i;
fprintf(vystup, "Pocet platnych vysledkov: %d\n", i);
fprintf(vystup, "Suma platnych vysledkov: %.6f\n", suma);
fprintf(vystup, "Aritmeticky priemer: %.10f\n", priemer);
max_min(i, vysledok, p_min_vysled, p_max_vysledok);
if(testovanie_zhody(i, vysledok)==1)
	fprintf(vystup, "Neda sa urcit min\n");
else
	fprintf(vystup, "Minimum: %f\n", min);
if(testovanie_zhody(i, vysledok)==1)
	fprintf(vystup, "Neda sa urcit max\n");
else
	fprintf(vystup, "Maximum: %f\n", max);

	
fclose (vstup);
fclose (vystup);

   	return 0;
}
